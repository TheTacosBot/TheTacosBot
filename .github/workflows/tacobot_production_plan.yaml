name: Terraform Plan - Production

permissions:
  id-token: write # required for OIDC authentication with AWS
  contents: read # required to clone the repo
  statuses: write # required to create a status check
  deployments: write # required to create a deployment
  actions: read # required to get the job id to link the status to the correct job/log output

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Name of the TacoBot Project'
        required: true
      dir:
        description: 'Directory to run Terraform'
        required: true
      workflow:
        description: 'TacoBot Workflow'
        required: false
      terraform_version:
        description: 'Terraform Version'
        default: "1.1.7"

jobs:
  plan_terraform:
    runs-on: ubuntu-latest
    steps:
      #- uses: hashicorp/setup-terraform@v3
      #  with:
      #    terraform_version: ${{ github.event.inputs.terraform_version }}
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::809929912595:role/GitHubActionRole
          role-session-name: tacobot
          aws-region: us-west-2
          disable-retry: true
      - name: Create unique plan path
        id: create_plan_path
        run: |
          echo "::set-output name=plan_path::$(uuidgen)"
      - name: Terraform Init
        working-directory: ${{ github.event.inputs.dir }}
        run: terraform init
      - name: Terraform Plan
        id: terraform_plan
        working-directory: ${{ github.event.inputs.dir }}
        run: terraform plan -out=${{ steps.create_plan_path.outputs.plan_path }} | tee full_plan_output
      - name: Save Plan
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.create_plan_path.outputs.plan_path }}
          path: |
            ${{ github.event.inputs.dir }}/${{ steps.create_plan_path.outputs.plan_path }}
      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
      - name: Get Current Job Log URL
        uses: Tiryoh/gha-jobid-action@v1
        id: job_id
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          job_name: Terraform Plan
      - name: Output Current Job Log URL
        run: echo ${{ steps.jobs.outputs.html_url }}
      - name: Create status check
        working-directory: ${{ github.event.inputs.dir }}
        run: |
          # We need to strip the color from the Terraform plan to prevent invalid
          # characters from creating malformed JSON
          sed -i 's/\x1b\[[0-9;]*m//g' full_plan_output
          SUMMARY=$(cat full_plan_output | grep 'Plan:.*')
          POST_BODY='{
            "state": "success",
            "target_url": "${{ steps.job_id.outputs.html_url }}",
            "description": "'$SUMMARY'",
            "context": "${{ inputs.name }}"
          }'

          gh api repos/${{ github.repository }}/statuses/${{ github.sha }} --input - <<< "$POST_BODY"