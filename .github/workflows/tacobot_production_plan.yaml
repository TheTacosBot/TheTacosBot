name: Terraform Plan - Production

permissions:
  id-token: write
  contents: read
  statuses: write
  deployments: write

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Name of the TacoBot Project'
        required: true
      dir:
        description: 'Directory to run Terraform'
        required: true
      workflow:
        description: 'TacoBot Workflow'
        required: false
      terraform_version:
        description: 'Terraform Version'
        default: "1.1.7"

jobs:
  plan_terraform:
    runs-on: ubuntu-latest
    steps:
      #- uses: hashicorp/setup-terraform@v3
      #  with:
      #    terraform_version: ${{ github.event.inputs.terraform_version }}
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::809929912595:role/GitHubActionRole
          role-session-name: tacobot
          aws-region: us-west-2
      - name: Create unique plan path
        id: create_plan_path
        run: |
          echo "::set-output name=plan_path::$(uuidgen)"
      - name: Terraform Init
        working-directory: ${{ github.event.inputs.dir }}
        run: terraform init
      - name: Terraform Plan
        working-directory: ${{ github.event.inputs.dir }}
        run: terraform plan -out=${{ steps.create_plan_path.outputs.plan_path }} | tee full_plan_output
      - name: Save Plan
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.create_plan_path.outputs.plan_path }}
          path: |
            ${{ github.event.inputs.dir }}/${{ steps.create_plan_path.outputs.plan_path }}
      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
      # TODO: figure out why summary fails the json formatting
      - name: Create status check
        working-directory: ${{ github.event.inputs.dir }}
        run: |
          SUMMARY=$(cat full_plan_output | grep 'Plan:.*')
          LOG_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/job/${{ job.container.id }}"
          POST_BODY='{
            "state": "success",
            "target_url": "'$LOG_URL'",
            "description": "$SUMMARY",
            "context": "${{ inputs.name }}"
          }'
          gh api repos/${{ github.repository }}/statuses/${{ github.sha }} --input - <<< "$POST_BODY"
      - name: Create deployment
        id: create_deployment
        run: |
          PAYLOAD="{\"sha\": \"${{ github.sha }}\", \"pr_number\": \"${{ github.event.pull_request.number }}\", \"project_name\": \"${{ github.event.inputs.name }}\", \"directory\": \"${{ github.event.inputs.dir }}\", \"workflow\": \"${{ github.event.inputs.workflow }}\", \"plan_path\": \"${{ steps.create_plan_path.outputs.plan_path }}\"}"
          DEPLOYMENT_RESPONSE=$(gh api -X POST /repos/${{ github.repository }}/deployments \
            -f ref="${{ github.sha }}" \
            -f environment="${{ github.event.inputs.name }}" \
            -f description="Planned project ${{ github.event.inputs.name }}" \
            -F auto_merge=false \
            -F required_contexts[]=null \
            -F payload="$PAYLOAD")
          echo "$DEPLOYMENT_RESPONSE" | jq .
          DEPLOYMENT_ID=$(echo "$DEPLOYMENT_RESPONSE" | jq -r .id)
          echo "::set-output name=deployment_id::$DEPLOYMENT_ID"
      - name: Set deployment status
        run: |
          DEPLOYMENT_ID=${{ steps.create_deployment.outputs.deployment_id }}
          STATE="pending"  # Can be one of error, failure, inactive, in_progress, queued pending, or success

          gh api -X POST /repos/${{ github.repository }}/deployments/$DEPLOYMENT_ID/statuses \
            -f state="$STATE" \
            -f log_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            -f description="Deployment $STATE" \
            -f environment="${{ github.event.inputs.name }}" \
            -f environment_url="https://example.com/"  # Optional: URL to view the deployed application
          echo "Deployment status set to $STATE"