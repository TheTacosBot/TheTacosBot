name: Terraform Apply - Production

permissions:
  contents: read
  id-token: write
  issues: read
  actions: read
  pull-requests: read
  deployments: read

on:
  issue_comment:                                     
    types: [created, edited, deleted]

jobs:
  apply_terraform:
    if: ${{ github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    steps:
      - name: Extract project name
        id: get_project_name_from_comment
        run: |
          COMMENT="${{ github.event.comment.body }}"
          PROJECT_NAME=$(echo "$COMMENT" | sed -n 's/.*--project \([^ ]*\).*/\1/p')
          echo "PROJECT_NAME=$PROJECT_NAME"
          echo "::set-output name=project_name::$PROJECT_NAME"
      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
      - name: Retrieve GitHub Deployment for Workspace
        id: get_deployment_info
        run: |
          DEPLOYMENT_JSON=$(gh api repos/${{ github.repository }}/deployments?environment=${{ steps.get_project_name_from_comment.outputs.project_name }} | jq '.[0]')
          DEPLOYMENT_ID=$(echo "$DEPLOYMENT_JSON" | jq -r '.id')
          DEPLOYMENT_INFO=$(echo "$DEPLOYMENT_JSON" | jq '.[0].payload')
          echo "DEPLOYMENT_INFO=$DEPLOYMENT_INFO"
          SHA=$(echo $DEPLOYMENT_INFO | jq -r fromjson.sha)
          PR_NUMBER=$(echo $DEPLOYMENT_INFO | jq -r fromjson.pr_number)
          PROJECT_NAME=$(echo $DEPLOYMENT_INFO | jq -r fromjson.project_name)
          DIRECTORY=$(echo $DEPLOYMENT_INFO | jq -r fromjson.directory)
          WORKFLOW=$(echo $DEPLOYMENT_INFO | jq -r fromjson.workflow)
          PLAN_PATH=$(echo $DEPLOYMENT_INFO | jq -r fromjson.plan_path)
          echo "::set-output name=deployment_id::$DEPLOYMENT_ID"
          echo "::set-output name=sha::$SHA"
          echo "::set-output name=pr_number::$PR_NUMBER"
          echo "::set-output name=project_name::$PROJECT_NAME"
          echo "::set-output name=directory::$DIRECTORY"
          echo "::set-output name=workflow::$WORKFLOW"
          echo "::set-output name=plan_path::$PLAN_PATH"
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.get_deployment_info.outputs.sha }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::809929912595:role/GitHubActionRole
          role-session-name: tacobot
          aws-region: us-west-2
      - name: Download artifact
        id: download-artifact
        uses: dawidd6/action-download-artifact@v3
        with:
          pr: ${{ github.event.issue.pull_request.number }}
          workflow: ${{ steps.get_deployment_info.outputs.workflow }}_plan.yaml
          name: ${{ steps.get_deployment_info.outputs.plan_path }}
          path: ${{ steps.get_deployment_info.outputs.directory }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Terraform Init
        run: |
          cd ${{ steps.get_deployment_info.outputs.directory }}
          terraform init
      - name: Terraform Apply
        id: apply_terraform
        run: |
          cd ${{ steps.get_deployment_info.outputs.directory }}
          if terraform apply -auto-approve ${{ steps.get_deployment_info.outputs.plan_path }}; then
            echo "::set-output name=status::success"
          else
            echo "::set-output name=status::failure"
          fi
      - name: Set deployment status
        run: |
          STATE="${{ steps.apply_terraform.outputs.status }}"  # Can be one of error, failure, inactive, in_progress, queued pending, or success
          gh api -X POST /repos/${{ github.repository }}/deployments/$DEPLOYMENT_ID/statuses \
            -f state="$STATE" \
            -f log_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            -f description="Deployment $STATE" \
            -f environment="${{ github.event.inputs.name }}" \
            -f environment_url="https://example.com/"  # Optional: URL to view the deployed application
          echo "Deployment status set to $STATE"