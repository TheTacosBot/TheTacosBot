name: 'TacosBot Apply Preperation'
description: 'Run this action before you run your Terraform Apply'
inputs:
  comment:
    description: 'The comment that triggered the action'
    required: false
  project_name:
    description: 'The name of the project'
    required: false
  github_token:
    description: 'GitHub Token'
    required: true
outputs:
  directory:
    description: "The directory to apply Terraform"
    value: ${{ steps.get_deployment_info.outputs.directory }}
  deployment_id:
    description: "The ID of the deployment"
    value: ${{ steps.get_deployment_info.outputs.deployment_id }}
  project_name:
    description: Name of the TacosBot Project
    value: ${{ steps.get_deployment_info.outputs.project_name}}
  pull_request_number: 
    description: The PR number
    value: ${{ steps.get_deployment_info.outputs.pr_number }}
runs:
  using: "composite"
  steps:
    - name: Extract project name
      shell: bash
      id: get_project_name_from_comment
      run: |
        if [ "${{ inputs.comment }}" ]; then
          COMMENT="${{ inputs.comment }}"
          PROJECT_NAME=$(echo "$COMMENT" | sed -n 's/.*--project \([^ ]*\).*/\1/p')
          echo "project_name::$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "No comment provided"
          exit 1
        else
          echo "project_name=${{ inputs.project_name }}" >> $GITHUB_OUTPUT
        fi
    - name: Authenticate GitHub CLI
      shell: bash
      run: |
        echo "${{ inputs.github_token }}" | gh auth login --with-token
    - name: Retrieve GitHub Deployment for Workspace
      id: get_deployment_info
      shell: python
      run: |
        import subprocess
        import json
        import os

        # Define the repository and environment
        repository = "${{ github.repository }}"
        environment = "${{ steps.get_project_name_from_comment.outputs.project_name }}"

        # Run the gh API command
        api_command = f"gh api repos/{repository}/deployments?environment={environment}"
        result = subprocess.run(api_command, shell=True, capture_output=True, text=True)
        deployments = json.loads(result.stdout)
        
        # Get the first deployment
        deployment = deployments[0] if deployments else None
        
        if deployment:
            deployment_id = deployment.get('id')
            deployment_info = deployment.get('payload')
            
            # Extract fields from the payload
            sha = deployment_info.get('sha')
            pr_number = deployment_info.get('pr_number')
            project_name = deployment_info.get('project_name')
            directory = deployment_info.get('project', {}).get('dir')
            workflow = deployment_info.get('project', {}).get('workflow')
            plan_path = deployment_info.get('project', {}).get('plan_path')
            
            # Set outputs for other steps
            with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                print(f'{name}={value}', file=fh)
            os.system(f"echo 'deployment_id={deployment_id}' >> $GITHUB_ENV")
            os.system(f"echo 'sha={sha}' >> $GITHUB_ENV")
            os.system(f"echo 'pr_number={pr_number}' >> $GITHUB_ENV")
            os.system(f"echo 'project_name={project_name}' >> $GITHUB_ENV")
            os.system(f"echo 'directory={directory}' >> $GITHUB_ENV")
            os.system(f"echo 'workflow={workflow}' >> $GITHUB_ENV")
            os.system(f"echo 'plan_path={plan_path}' >> $GITHUB_ENV")
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.get_deployment_info.outputs.sha }}
    - name: Download artifact
      id: download-artifact
      uses: dawidd6/action-download-artifact@v3
      with:
        pr: ${{ github.event.issue.pull_request.number }}
        workflow: ${{ steps.get_deployment_info.outputs.workflow }}_plan.yaml
        name: ${{ steps.get_deployment_info.outputs.plan_path }}
        path: ${{ steps.get_deployment_info.outputs.directory }}
        github_token: ${{ inputs.github_token }}
    - name: Rename plan
      shell: bash
      working-directory: ${{ steps.get_deployment_info.outputs.directory}}
      run: |
        mv ${{ steps.get_deployment_info.outputs.plan_path}} plan